name: Build and Release Tauri App

on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: ""
          - os: macos-latest
            target: "x86_64-apple-darwin"
          - os: macos-latest
            target: "aarch64-apple-darwin"
          - os: windows-latest
            target: ""

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        working-directory: ./
        run: pnpm install

      - name: Extract version
        id: get_version
        shell: bash
        working-directory: ./
        run: |
          if [ -f "package.json" ]; then
            VERSION=$(node -p "require('./package.json').version")
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "VERSION=0.1.0" >> $GITHUB_ENV
            echo "version=0.1.0" >> $GITHUB_OUTPUT
          fi

      - name: Build Tauri App
        working-directory: ./
        shell: bash
        run: |
          if [ -n "${{ matrix.platform.target }}" ]; then
            pnpm run tauri build --target ${{ matrix.platform.target }}
          else
            pnpm run tauri build
          fi
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Debug target directory
        if: failure()
        working-directory: ./
        shell: bash
        run: ls -la src-tauri/target/release/ 2>/dev/null || dir src-tauri/target/release/

      - name: Debug target-specific directory
        if: matrix.platform.os == 'macos-latest' && failure()
        working-directory: ./
        shell: bash
        run: ls -la src-tauri/target/${{ matrix.platform.target }}/release/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform.os }}-${{ matrix.platform.target || 'default' }}
          path: |
            # macOS x86_64
            src-tauri/target/x86_64-apple-darwin/release/bundle/macos/key-haven-front.app
            src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/key-haven-front_${{ env.VERSION }}_x64.dmg
            # macOS aarch64
            src-tauri/target/aarch64-apple-darwin/release/bundle/macos/key-haven-front.app
            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/key-haven-front_${{ env.VERSION }}_aarch64.dmg
            # Ubuntu
            src-tauri/target/release/bundle/deb/key-haven-front_${{ env.VERSION }}_amd64.deb
            src-tauri/target/release/bundle/rpm/key-haven-front-${{ env.VERSION }}-1.x86_64.rpm
            src-tauri/target/release/bundle/appimage/key-haven-front_${{ env.VERSION }}_amd64.AppImage
            # Windows
            src-tauri/target/release/bundle/msi/key-haven-front_${{ env.VERSION }}_x64_en-US.msi
            src-tauri/target/release/bundle/nsis/key-haven-front_${{ env.VERSION }}_x64-setup.exe
          if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Apenas para push no main
    permissions:
      contents: write  # Necessário para criar tags e releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Para garantir que o histórico esteja disponível para git tag

      - name: Extract version from package.json
        id: get_version
        shell: bash
        run: |
          if [ -f "package.json" ]; then
            VERSION=$(node -p "require('./package.json').version")
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "VERSION=0.1.0" >> $GITHUB_ENV
            echo "version=0.1.0" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $TAG
          git push origin $TAG

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: find artifacts -type f | sort

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}  # Usa a tag criada automaticamente
          name: App v${{ steps.get_version.outputs.version }}
          # draft: true  # Removido para publicar diretamente
          prerelease: false
          files: |
            artifacts/**/*.app
            artifacts/**/*.dmg
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.AppImage
            artifacts/**/*.msi
            artifacts/**/*.exe
          generate_release_notes: true
          fail_on_unmatched_files: false